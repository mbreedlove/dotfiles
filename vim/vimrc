""" Plugins
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
" Language
Plug 'vim-ruby/vim-ruby'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-bundler'
Plug 'elixir-lang/vim-elixir'
Plug 'slashmili/alchemist.vim'
Plug 'mattn/emmet-vim'
Plug 'leafgarland/typescript-vim'
Plug 'elzr/vim-json'
Plug 'glanotte/vim-jasmine'
Plug 'Quramy/tsuquyomi'
Plug 'vim-syntastic/syntastic'
Plug 'scrooloose/nerdcommenter'
Plug 'julialang/julia-vim'

" Completion
Plug 'tpope/vim-endwise'
"Plug 'townk/vim-autoclose'
Plug 'Valloric/YouCompleteMe', { 'do': './install.sh --clang-completer --system-libclang' }

" Code Display
Plug 'altercation/vim-colors-solarized'

" Integrations
Plug 'mileszs/ack.vim'
Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'

" Interface
Plug 'ctrlpvim/ctrlp.vim'
Plug 'vim-airline/vim-airline'

" Commands
Plug 'terryma/vim-multiple-cursors'
Plug 'easymotion/vim-easymotion'

" Other
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-sleuth'
Plug 'vim-scripts/HTML-AutoCloseTag'
Plug 'editorconfig/editorconfig-vim'

call plug#end()

""" Basics
set nocompatible     " explicitly get out of vi-compatible mode
set noexrc       " don't use local version of .(g)vimrc, .exrc
set background=dark     " we plan to use a dark background
syntax on       " syntax highlighting on

" General {
filetype plugin indent on  " load filetype plugins/indent settings
" set omnifunc=syntaxcomplete#Complete
set backspace=indent,eol,start    " make backspace a more flexible
set backup                        " make backup files
set backupdir=~/.vim/backup  " where to put backup files
set clipboard+=unnamed     " share windows clipboard
set directory=~/.vim/tmp   " directory to place swap files in
set fileformats=unix,dos,mac   " support all three, in this order
set hidden       " you can change buffers without saving
if has('mouse')
  set mouse=a       " use mouse everywhere
endif
set noerrorbells     " don't make noise

""" Vim UI
let g:solarized_termcolors=16
colorscheme solarized
set linespace=0              " don't insert any extra pixel lines betweens rows
"set list                     " we do what to show tabs, to ensure we get them out of my files
"set listchars=tab:>-,trail:- " show tabs and trailing
set matchtime=5              " how many tenths of a second to blink matching brackets for
set nohlsearch               " do not highlight searched for phrases
set incsearch                " DO highlight first term as you type
set nostartofline            " leave my cursor where it was
set visualbell t_vb=
set number                   " turn on line numbers
set numberwidth=4            " We are good up to 9999 lines
set report=0                 " tell us when anything is changed via :...
set ruler                    " Always show current positions along the bottom
set scrolloff=5              " Keep 10 lines (top/bottom) for scope
set shortmess=aOstT          " shortens messages to avoid 'press a key' prompt
set showcmd                  " show the command being typed
set showmatch                " show matching brackets
set sidescrolloff=10         " Keep 5 lines at the size


""" Text Formatting/Layout
set completeopt=     " don't use a pop up menu for completions
set expandtab       " no real tabs please!
set formatoptions=rq     " Automatically insert comment leader on return, and let gq format comments
set ignorecase       " case insensitive by default
set infercase       " case inferred by default
set nowrap       " do not wrap line
set shiftround       " when at 3 spaces, and I hit > ... go to 4, not 5
set smartcase       " if there are caps, go case-sensitive
set smartindent     " set smartindent
set shiftwidth=2     " auto-indent amount when using cindent, >>, << and stuff like that
set softtabstop=2     " when hitting tab or backspace, how many spaces should a tab be (see expandtab)
set tabstop=4 " real tabs should be 8, and they will show with set list on

""" Mappings
" Buffers
nmap <leader>T  :enew<CR>   " Open new buffer
nmap <leader>l  :bnext<CR>  " Next buffer
nmap <leader>h  :bprev<CR>  " Previous buffer
" Emulate 'closing' the tab
nmap <leader>q :bprev <BAR> bdelete #<CR>

set pastetoggle=<F2>                        " <F2> toggles paste mode
set t_BE=            " Don't show annoying <PasteStart> and <PasteEnd> tags

""" NerdTREE
" Open NerdTREE if no files specified
"   autocmd StdinReadPre * let s:std_in=1
"   autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
" NerdTREE key binding
map <C-f> :NERDTreeToggle<CR>
" Close Vim if only window is NerdTREE
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

""" CtrlP
let g:ctrlp_working_path_mode = 'ra'

" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

""" Airline
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1

""" GitGutter
" Don't set keymappings, use Fugitive for Git management
let g:gitgutter_map_keys = 0

""" Multiple Cursors
let g:multi_cursor_use_default_mapping=0
let g:multi_cursor_next_key='<C-n>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'
" Allows exiting back to normal mode rather than exiting multi_cursor
let g:multi_cursor_exit_from_insert_mode=0

""" Emmet
let g:user_emmet_install_global = 0
autocmd FileType html,css,htmldjango,scss,eruby,less,eelixir EmmetInstall
let g:user_emmet_expandabbr_key = '<Tab>' " Tab expands tags
let g:user_emmet_mode='a'    "enable all function in all mode.

" Vim-Jasmine
autocmd BufReadPost,BufNewFile *.spec.ts set filetype=jasmine.javascript syntax=jasmine

""" Ack
" Detect the_silver_searcher
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

" allows cursor change in tmux mode
if exists('$TMUX')
    let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" random shit
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:tsuquyomi_disable_quickfix = 1
let g:tsuquyomi_single_quote_import=1
let g:syntastic_typescript_checkers = ['tsuquyomi'] 

if !exists("g:ycm_semantic_triggers")
  let g:ycm_semantic_triggers =  {
        \   'c' : ['->', '.'],
        \   'objc' : ['->', '.'],
        \   'ocaml' : ['.', '#'],
        \   'cpp,objcpp' : ['->', '.', '::'],
        \   'perl' : ['->'],
        \   'php' : ['->', '::', '"', "'", 'use ', 'namespace ', '\'],
        \   'cs,jasmine,java,javascript,typescript,d,python,perl6,scala,vb,elixir,go' : ['.'],
        \   'html': ['<', '"', '</', ' '],
        \   'vim' : ['re![_a-za-z]+[_\w]*\.'],
        \   'ruby' : ['.', '::'],
        \   'lua' : ['.', ':'],
        \   'erlang' : [':'],
        \   'haskell' : ['.', 're!.']
        \ }
endif
let g:NERDTreeWinSize = 40 
